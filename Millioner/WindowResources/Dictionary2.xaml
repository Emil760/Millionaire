<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Black" Offset="0"/>
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="#FF0A1F5C" Offset="0.1"/>
        <GradientStop Color="#FF1D58FF" Offset="0.5"/>
        <GradientStop Color="#FF0A1F5C" Offset="0.9"/>
    </LinearGradientBrush>

    <Style x:Key="VariantStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Foreground" Value="BlueViolet"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="4" Color="CadetBlue" RenderingBias="Quality"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AnswerStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <ControlTemplate x:Key="TakeMoneyTemplate" TargetType="Button">
        <Border Background="{StaticResource ButtonNormalBackground}" BorderBrush="Goldenrod" BorderThickness="2" Cursor="Hand" CornerRadius="20"  Margin="25,5,100,5">
            <ContentPresenter TextBlock.Foreground="White" TextBlock.FontSize="25" TextBlock.FontWeight="DemiBold" VerticalAlignment="Center" HorizontalAlignment="Center" />
        </Border>
    </ControlTemplate>
    
    <ControlTemplate x:Key="ButtonTemplate" TargetType="Button">
        <Border Opacity="0.9" x:Name="border" CornerRadius="15" Background="{StaticResource ButtonNormalBackground}" BorderBrush="Goldenrod" BorderThickness="2" Margin="20,5" Cursor="Hand">
            <ContentPresenter />
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                <Setter TargetName="border" Property="BorderBrush" Value="ForestGreen"/>
                <Setter TargetName="border" Property="BorderThickness" Value="3"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=Stat}" Value="Correct">
                <Setter TargetName="border" Property="Background" Value="Black"/>
                <DataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="wrong"/>
                    <StopStoryboard BeginStoryboardName="wait"/>
                    <BeginStoryboard x:Name="correct">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" From="Yellow" To="Green" Duration="0:0:0.3" RepeatBehavior="Forever" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Stat}" Value="Wrong">
                <Setter TargetName="border" Property="Background" Value="Black"/>
                <DataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="correct"/>
                    <StopStoryboard BeginStoryboardName="wait"/>
                    <BeginStoryboard x:Name="wrong">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" From="Yellow" To="Red" Duration="0:0:0.3" RepeatBehavior="Forever" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Stat}" Value="Wait">
                <Setter TargetName="border" Property="Background" Value="Black"/>
                <DataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="correct"/>
                    <StopStoryboard BeginStoryboardName="wrong"/>
                    <BeginStoryboard x:Name="wait">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" From="#FF716B1C" To="#FFFFEE00" Duration="0:0:2" RepeatBehavior="Forever" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Stat}" Value="Disabled">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=Stat}" Value="Clicked">
                <Setter TargetName="border" Property="Background" Value="Gray"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ListBoxStyle" TargetType="ListBox">
        <Setter Property="Margin" Value="20,40"/>
        <Setter Property="TextBlock.FontSize" Value="20"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Background" Value="DarkBlue"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Margin" Value="20,40"/>
                <Setter Property="TextBlock.FontSize" Value="20"/>
                <Setter Property="HorizontalContentAlignment" Value="Right"/>
                <Setter Property="Background" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ListBoxTemplate" TargetType="ListBox">
        <Border Margin="20,10" Background="DarkBlue" BorderBrush="Goldenrod" BorderThickness="3" MaxHeight="480" MaxWidth="300">
            <ScrollViewer>
                <StackPanel IsItemsHost="True"/>
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <Style x:Key="ListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="border" Cursor="Hand" Width="Auto" Height="Auto">
                        <TextBlock x:Name="text" Text="{Binding Path=Price}" Margin="0,2" FontSize="20" HorizontalAlignment="Right" Foreground="White" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="text" Property="Foreground" Value="Cyan"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=IsNonFire}" Value="True">
                            <Setter TargetName="text" Property="Foreground" Value="Yellow"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TipTemplate" TargetType="Button">
        <Border BorderBrush="Goldenrod" BorderThickness="3" Background="BlanchedAlmond" CornerRadius="30" Width="60" Height="60" Cursor="Hand">
            <Grid>
                <ContentPresenter Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <Image Name="croos" Visibility="Hidden" Source="/Resources\images\croos.png"/>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=CanUse}" Value="False">
                <Setter TargetName="croos" Property="Visibility" Value="Visible"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsEnabled}" Value="False">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=CanUse}" Value="True"/>
                    <Condition Binding="{Binding Path=IsEnabled}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="IsEnabled" Value="True"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MistakeStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="30"/>
    </Style>

    <Style x:Key="FiftyFiftyStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="17"/>
    </Style>

</ResourceDictionary>